// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id               Int           @id @default(autoincrement())
  createdAt        Int          
  name             String
  hasWallet        Boolean?      @default(false)
  wallet           String?
  collectibles     Collectible[]
  avatar           Avatar?       @relation()
  earnedTokens     Int?    
  spentTokens      Int?        
  balance          Int?         
  playedGames      Game[]        @relation("playedGames")
  recommendedGames Game[]        @relation("recommendedGames")
  wonRewards       Reward[]
}

model Reward {
  id           Int      @id @default(autoincrement())
  title        String
  subtitle     String
  expiresAt    DateTime
  price        Int
  image        String
  callToAction String
  topReward    Boolean  @default(false)
  type         String?
  user         User?    @relation(fields: [ownerId], references: [id])
  gameId       Int?
  game         Game?    @relation(fields: [gameId], references: [id])
  ownerId      Int?
}

model Game {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  title         String   @unique
  subtitle      String
  coverImage    String
  smallImage    String
  topGame       Boolean  @default(false)
  type          String?
  subtype       String?
  rewards       Reward[]
  playedBy      User[]   @relation("playedGames")
  recommendedTo User[]   @relation("recommendedGames")
}

model Avatar {
  id          Int        @id @default(autoincrement())
  avatarLevel Int        @default(1)
  accessories  Accessory[] @relation()
  owner       User       @relation(fields: [ownerId], references: [id])
  ownerId     Int        @unique
}

enum AccessoryType {
  HAT
  GLASSES
  MASK
  SHIRT
  PANTS
  SHOES
  ELECTRONICS 
  SPORT
}

model Accessory {
  id       Int     @id @default(autoincrement())
  name     String
  category AccessoryType
  bundle   String
  image    String
  equipped Boolean @default(false)
  rarity   String?
  avatar   Avatar? @relation(fields: [avatarId], references: [id])
  avatarId Int?
}

enum CollectibleType {
 Accessory
 NFT
}

model Collectible {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  type        CollectibleType
  is_rare     Boolean
  is_a_skin   Boolean
  image       String
  user        User    @relation(fields: [ownerId], references: [id])
  ownerId     Int
}